

/*
Репозиторий для работы находится в директории code-user. Перейти в неё нужно в терминале.

Добавьте в репозиторий два файла двумя разными коммитами, файлы нужно создать, если их нет:

Файл hexlet.txt с текстом Hello, Hexlet! внутри
Файл index.html с текстом <h1>Мама, я коммичу</h1> внутри
*/

Решение:

cd code-user/ # Переходим в директорию code-user
echo 'Hello, Hexlet!' > hexlet.txt
echo '<h1>Мама, я коммичу</h1>' > index.html
git add hexlet.txt
git commit -m 'add hexlet.txt'
git add index.html
git commit -m 'add index.html'

________________________________________________________________________________

/*
Выполните клонирование репозитория:

# Находимся в той директории, которая загружается автоматически в терминале
# Первый параметр «откуда», второй — «куда»
$ git clone repos/git-user code-user
Перейдите в директорию code-user, в которой находится склонированный репозиторий. В репозитории уже есть два файла. Измените их так:

В hexlet.txt добавьте второй строчкой текст I like to change files
В index.html замените текст на <h1>С помощью Git можно писать книги</h1>
Выполните один коммит, содержащий сразу эти два изменения. Во время коммита Git попросит ввести электронную почту и имя пользователя. Сделайте это, используя любые вымышленные данные
Добавьте изменения в основной репозиторий с помощью git push
*/

Решение:

git clone repos/git-user code-user
cd code-user/
echo 'I like to change files' >> hexlet.txt
echo '<h1>С помощью Git можно писать книги</h1>' > index.html
git add hexlet.txt
git add index.html
git config --global user.email "you@example.com"
git config --global user.name "Your Name"
git commit -m 'fix hexlet.txt and index.html'
git push

_______________________________________________________________________________________
/*
В рабочей директории два изменения: один файл удален, другой изменен. Отмените эти изменения. Вывод git status должен выглядеть следующим образом:

$ git status
nothing to commit, working tree clean

*/

Решение:

git restore hexlet.txt
git restore index.html

________________________________________________________________________________
/*
Выполните следующие действия:

Удалите файл index.html
Переименуйте файл hexlet.txt в hexlet2.txt
После каждого действия добавляйте изменения в отслеживание и изучайте вывод команды git diff --staged и git status.
Обратите внимание на различия вывода последней команды до добавления изменений в индекс и после.
*/

Решение:

cd code-user/ # Переходим в директорию code-user
rm -f index.html
git add index.html
git commit -m 'remove index.html'
mv hexlet.txt hexlet2.txt
git add hexlet.txt
git add hexlet2.txt
git commit -m 'rename hexlet.txt to hexlet2.txt'

________________________________________________________________________________
/*
Выведите историю изменений в репозитории
Изучите, какие изменения были сделаны в файле hexlet2.txt последним коммитом. Посмотрите, что было удалено, а что добавлено в файл
Сделайте в файле hexlet2.txt обратные изменения
Сделайте коммит
Таким образом, новым коммитом мы перезаписываем изменения, сделанные в последнем коммите.
*/

Решение:

cd code-user/ # Переходим в директорию code-user
git log -p
echo 'Hello Hexlet!' > hexlet2.txt
git add hexlet2.txt
git commit -m 'fix hexlet2.txt'

________________________________________________________________________________
/*
Отмените все изменения, сделанные в рабочей директории и индексе. В результате должен получиться такой вывод:

$ git status
nothing to commit, working tree clean

*/

Решение:

cd code-user/ # Переходим в директорию code-user
git status
git restore hexlet.txt
git restore --staged index.md index.html
git restore index.html
git clean -fd
________________________________________________________________________________

/*
Репозиторий для работы находится в директории code-user. Перейти в нее нужно в терминале.

Полностью удалите два последних коммита.

*/

Решение:

cd code-user/ # Переходим в директорию code-user
git reset --hard HEAD~2
________________________________________________________________________________
/*
Репозиторий для работы находится в директории code-user. Перейти в нее нужно в терминале.

Вы сделали коммит, но забыли добавить в него пару файлов. Измените последний коммит так, чтобы он содержал все три файла одновременно.


*/

Решение:

cd code-user/ # Переходим в директорию code-user
git add index.html
git add todo.md
git commit --amend
________________________________________________________________________________

/*
Репозиторий для работы находится в директории code-user. Перейти в нее нужно в терминале.

В файл hexlet.txt было добавлено несколько строк.

Используя интерактивный режим git add, разбейте изменения на две части и затем добавьте в индекс одну из них. Не выходя из интерактивного режима, выведите на экран состояние изменений, подготовленных к коммиту. Используйте для этого команду status
Сделайте коммит, в комментарии которого напишите значение из столбца staged


*/

Решение:

cd code-user/ # Переходим в директорию code-user
git add -i
patch
1
# Подтверждаем выбор нажатием Enter
s
y
n
status
quit
git commit -m '+2/-0'
________________________________________________________________________________

/*
Репозиторий для работы находится в директории code-user. Перейти в неё нужно в терминале.

Вы сделали несколько коммитов в репозиторий и в каком-то из них сохранили файл todo.md со списком задач, а потом удалили этот файл. Загвоздка в том, что в комментарии к коммиту добавление этого файла отражено не было.

Найдите в истории коммит, в котором был добавлен файл todo.md, и переключитесь на него с помощью git checkout.


*/

Решение:

cd code-user/ # Переходим в директорию code-user
git log -p --oneline -- todo.md
git checkout 7c2fcf8

# Альтернативный вариант решения использовать опцию --name-status
# git log --name-status
# Метка "A" перед файлом, сокращение от "Added"
________________________________________________________________________________

/*
Репозиторий для работы находится в директории code-user. Перейти в неё нужно в терминале.

В репозитории создано две дополнительные ветки, помимо main.

Переключитесь на ветку refactoring и удалите два последних коммита с помощью git reset --hard.

Переключитесь на ветку working-on-html и в этой ветке сделайте коммит, отредактировав файл index.html следующим образом:

Замените содержимое тега h1 на «Ветки в Git достойны отдельного курса»
Замените содержимое тега p на «Ветки являются ссылками на определённый коммит.»
Текст размещайте без кавычек.


*/

Решение:

git switch refactoring
git reset --hard HEAD~2
git switch working-on-html
# Редактируем и сохраняем файл
# Можно использовать vim или nano
vim index.html
git add index.html
git commit -m 'fix index.html'
________________________________________________________________________________

/*
Репозиторий для работы находится в директории code-user. Перейти в неё нужно в терминале.

Исключите файлы notes.txt и todo.md из репозитория гит таким образом, чтобы сами файлы остались в рабочей директории, но любые изменения в них больше не отслеживались гитом.

Далее добавьте все получающиеся изменения в индекс и сделайте коммит.

*/

Решение:

cd code-user/ # Переходим в директорию code-user
echo 'notes.txt' > .gitignore
echo 'todo.md' >> .gitignore
git rm --cached notes.txt
git commit -m 'remove notes.txt from repo'
git add .gitignore
git commit -m 'add .gitignore'


.gitignore

notes.txt
todo.md
________________________________________________________________________________

/*
Репозиторий для работы находится в директории code-user. Перейти в нее нужно в терминале.

В рабочей директории уже есть изменения, сохраните их с помощью git stash.

Создайте файл todo.md с любым содержимым
Добавьте в файл hexlet.txt строку: «stash не трогает новые файлы, которые еще не добавлены в индекс.»
Сделайте коммит только с файлом hexlet.txt
Восстановите из стэша сохраненные ранее изменения
Сделайте еще один коммит, включающий все файлы

*/

Решение:

cd code-user/ # Переходим в директорию code-user
git add . # Так как есть изменения не добавленные в индекс
git stash
echo 'Hexlet is awesome!' > todo.md
echo 'stash не трогает новые файлы, которые еще не добавлены в индекс.' >> hexlet.txt
git add hexlet.txt
git commit -m 'refactoring'
git stash pop
git add .
git commit -m 'changes from stash'

________________________________________________________________________________